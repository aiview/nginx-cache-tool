#!/bin/bash

# nginx-cache-flush --- A simple Bash script to delete all items from
#                       the Nginx cache.

# Copyright (C) 2015 Alex Zhang <alexzhangs@gmail.com>

# Author: Alex Zhang <alexzhangs@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# Except as contained in this notice, the name(s) of the above copyright
# holders shall not be used in advertising or otherwise to promote the sale,
# use or other dealings in this Software without prior written authorization.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

SCRIPTNAME=${0##*/}

function print_usage() {
    echo "$SCRIPTNAME <cache directory> [flush delay minutes]"
}

## Check the number of arguments.
if [ $# -lt 1 ]; then
    print_usage
    exit 1
fi

## Flush from the given cache zone.
## $1 - the cache directory.
## $2 - the flush delay minutes, default 0: means flushing ASAP.
function nginx_cache_flush() {
    local cache_subdirs=( 0 1 2 3 4 5 6 7 8 9 a b c d e f )
    local each_delay=$(( ${2:0} * 60 / ${#cache_subdirs[@]} ))
    local i=0
    local subdir path

    [[ -d $1 ]] || return $?

    ## Loop over all matched items.
    for subdir in ${cache_subdirs[@]}; do
        i=$(( i + 1 ))
        path="$1/$subdir"
        [[ -d $path ]] || continue
        [[ $path == '/' ]] && continue
        echo "Deleting $path..."
        rm -rf "$path" 2>/dev/null
        if [[ $each_delay -gt 0 && $i -lt ${#cache_subdirs[@]} ]]; then
            echo "Sleeping $each_delay second(s)."
            sleep $each_delay
        fi
    done
} # nginx_cache_flush

## Try to flush from the cache.
nginx_cache_flush $1 $2

exit $?
